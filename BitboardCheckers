public class BitboardCheckers {
    private long player1Pieces;  // Bitboard for Player 1 pieces
    private long player2Pieces;  // Bitboard for Player 2 pieces
    private long kings;          // Bitboard for Kings (shared by both players)

    private static final long LEFT_EDGE = 0x8080808080808080L;
    private static final long RIGHT_EDGE = 0x0101010101010101L;
    private static final long BLACK_TILES = 0x55AA55AA55AA55AAL;

    private static final int UP_LEFT = 9;
    private static final int UP_RIGHT = 7;
    private static final int DOWN_LEFT = -7;
    private static final int DOWN_RIGHT = -9;

    public BitboardCheckers() {
        // Player 1 starts on the first three rows of black squares
        player1Pieces = 0x00000000000000FFL; // Positions: 1, 3, 5, 7, 9, 11, 13, 15
        player1Pieces |= 0x000000000000FF00L; // Positions: 17, 19, 21, 23, 25, 27, 29, 31
        player1Pieces |= 0x0000000000FF0000L; // Positions: 33, 35, 37, 39, 41, 43, 45, 47

        // Player 2 starts on the last three rows of black squares
        player2Pieces = 0xFF00000000000000L; // Positions: 48, 50, 52, 54, 56, 58, 60, 62
        player2Pieces |= 0x00FF000000000000L; // Positions: 49, 51, 53, 55, 57, 59, 61, 63
        player2Pieces |= 0x0000FF0000000000L; // Positions: 32, 34, 36, 38, 40, 42, 44, 46

        kings = 0L;
    }

    public void displayBoardState() {
        System.out.println("Player 1's Pieces (Binary): " + BitManipulationUtility.toBinaryString(player1Pieces));
        System.out.println("Player 1's Pieces (Hex): " + BitManipulationUtility.toHexString(player1Pieces));
        System.out.println("Player 2's Pieces (Binary): " + BitManipulationUtility.toBinaryString(player2Pieces));
        System.out.println("Player 2's Pieces (Hex): " + BitManipulationUtility.toHexString(player2Pieces));
        System.out.println("Kings (Binary): " + BitManipulationUtility.toBinaryString(kings));
        System.out.println("Kings (Hex): " + BitManipulationUtility.toHexString(kings));
        printBoard();
    }

    public void printBoard() {
        for (int i = 0; i < 64; i++) {
            if (i % 8 == 0) System.out.println();

            long mask = 1L << i;
            if ((BLACK_TILES & mask) == 0) {
                System.out.print(". ");
            } else if ((player1Pieces & mask) != 0) {
                if ((kings & mask) != 0) {
                    System.out.print("K1 ");
                } else {
                    System.out.print("1 ");
                }
            } else if ((player2Pieces & mask) != 0) {
                if ((kings & mask) != 0) {
                    System.out.print("K2 ");
                } else {
                    System.out.print("2 ");
                }
            } else {
                System.out.print(". ");
            }
        }
        System.out.println();
    }

    public void promoteToKing(int position) {
        kings = BitManipulationUtility.setBit(kings, position);
    }

    public void makeMove(long playerPieces, long opponentPieces, long piece, int direction) {
        long move = direction > 0 ? piece << direction : piece >>> -direction;

        if (playerPieces == player1Pieces) {
            player1Pieces = BitManipulationUtility.clearBit(player1Pieces, Long.numberOfTrailingZeros(piece));
            player1Pieces = BitManipulationUtility.setBit(player1Pieces, Long.numberOfTrailingZeros(move));
        } else {
            player2Pieces = BitManipulationUtility.clearBit(player2Pieces, Long.numberOfTrailingZeros(piece));
            player2Pieces = BitManipulationUtility.setBit(player2Pieces, Long.numberOfTrailingZeros(move));
        }

        // Promote to king if necessary
        if ((move & 0xFF00000000000000L) != 0 && playerPieces == player1Pieces) {
            promoteToKing(Long.numberOfTrailingZeros(move));
        }
        if ((move & 0x00000000000000FFL) != 0 && playerPieces == player2Pieces) {
            promoteToKing(Long.numberOfTrailingZeros(move));
        }
    }

    public boolean isValidMove(long playerPieces, long opponentPieces, long piece, int direction) {
        long move = direction > 0 ? piece << direction : piece >>> -direction;

        if ((move & BLACK_TILES) != 0 && (move & (playerPieces | opponentPieces)) == 0) {
            if ((direction == UP_LEFT || direction == DOWN_LEFT) && (piece & LEFT_EDGE) != 0) return false;
            if ((direction == UP_RIGHT || direction == DOWN_RIGHT) && (piece & RIGHT_EDGE) != 0) return false;
            return true;
        }
        return false;
    }

    public static void main(String[] args) {
        BitboardCheckers game = new BitboardCheckers();
        System.out.println("Initial Board State:");
        game.displayBoardState();

        long piece = 1L << 17; // Example piece from Player 1
        game.makeMove(game.player1Pieces, game.player2Pieces, piece, UP_LEFT); // Move example

        System.out.println("\nBoard After Move:");
        game.displayBoardState();
    }
}
