public class BitManipulationUtility {

    // Set a specific bit
    public static long setBit(long bitboard, int position) {
        return bitboard | (1L << position);
    }

    // Clear a specific bit
    public static long clearBit(long bitboard, int position) {
        return bitboard & ~(1L << position);
    }

    // Toggle a specific bit
    public static long toggleBit(long bitboard, int position) {
        return bitboard ^ (1L << position);
    }

    // Get the value of a specific bit
    public static boolean getBit(long bitboard, int position) {
        return (bitboard & (1L << position)) != 0;
    }

    // Convert a number to a binary string (64-bit padded for bitboard)
    public static String toBinaryString(long value) {
        return String.format("%64s", Long.toBinaryString(value)).replace(' ', '0');
    }

    // Convert a number to a hexadecimal string
    public static String toHexString(long value) {
        return String.format("0x%016X", value);
    }

    // Perform binary arithmetic: addition
    public static long add(long a, long b) {
        return a + b;
    }

    // Perform binary arithmetic: subtraction
    public static long subtract(long a, long b) {
        return a - b;
    }

    // Perform binary arithmetic: multiplication
    public static long multiply(long a, long b) {
        return a * b;
    }

    // Perform binary arithmetic: division
    public static long divide(long a, long b) {
        return a / b;
    }

    // Convert between decimal, binary, and hexadecimal formats
    public static String toDecimalString(long value) {
        return Long.toString(value);
    }
}

