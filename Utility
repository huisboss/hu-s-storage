public class BitManipulationUtility {

    public static long setBit(long value, int position) {
        return value | (1L << position);
    }

    public static long clearBit(long value, int position) {
        return value & ~(1L << position);
    }

    public static long toggleBit(long value, int position) {
        return value ^ (1L << position);
    }

    public static int getBit(long value, int position) {
        return (value & (1L << position)) != 0 ? 1 : 0;
    }

    public static long binaryAddition(long a, long b) {
        return a + b;
    }

    public static long binarySubtraction(long a, long b) {
        return a - b;
    }

    public static long binaryMultiplication(long a, long b) {
        return a * b;
    }

    public static long binaryDivision(long a, long b) {
        if (b == 0) throw new ArithmeticException("Division by zero");
        return a / b;
    }

    public static String toBinaryString(long value) {
        return Long.toBinaryString(value);
    }

    public static String toHexString(long value) {
        return Long.toHexString(value);
    }

    public static String toDecimalString(long value) {
        return Long.toString(value);
    }

    public static String toBinaryString(int value) {
        return Integer.toBinaryString(value);
    }

    public static String toBinaryString(short value) {
        return Integer.toBinaryString(value & 0xFFFF);
    }

    public static String toBinaryString(byte value) {
        return Integer.toBinaryString(value & 0xFF);
    }

}
